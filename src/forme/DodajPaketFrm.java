/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.AbstractObjekat;
import domen.Clan;
import domen.Paket;
import domen.Termin;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import kontroler.Kontroler;
//import model.TblModelClan;
import model.TblModelPaket;
import model.TblModelTermin;

/**
 *
 * @author vujke
 */
public class DodajPaketFrm extends javax.swing.JPanel {

    String mode;
    TblModelTermin tbl;
    Paket paket;
    TblModelPaket tblP;
    List<AbstractObjekat> listaTer = new ArrayList<>();
    List<Termin> brisem;

    /**
     * Creates new form DodajPaketFrm
     */
    public DodajPaketFrm(String mode, Paket paket, TblModelPaket tblP, List<Termin> brisem) {
        this.tblP = tblP;
        this.mode = mode;
        initComponents();

        
        jtxtBrTermina.setEditable(false);
        jtxtBrTermina.setFocusable(false);

        if (mode.equals("create")) {
            srediTabeluCreate();
        }

        if (mode.equals("update")) {
          
                jtxtNaziv.setText(paket.getNaziv());
                jtxtCena.setText(paket.getCena());
                jbtSacuvaj.setText("Izmeni paket");
                this.paket = paket;
                this.brisem = brisem;
                
            try {
                List<Termin> uPaket = new ArrayList<>();
                listaTer = Kontroler.vratiKontrolera().vratiListuTermina();
                for (AbstractObjekat x : listaTer) {
                    Termin tt = (Termin) x;
                    if(tt.getPaket().equals(paket)){
                        uPaket.add(tt);
                    }
                }
                System.out.println(uPaket.size());
                paket.setTermini(uPaket);
                
                srediTabeluUpdate(uPaket);
                brojTermina();
            } catch (IOException ex) {
                Logger.getLogger(DodajPaketFrm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DodajPaketFrm.class.getName()).log(Level.SEVERE, null, ex);
            }
                
                
                
                //zaBrisanje = terminiInicijalno;
                //System.out.println("INICIJALNO: "+zaBrisanje.size());
                //System.out.println("BRISEM: "+brisem.size());
//                srediTabeluUpdate();
//                brojTermina();

//                tbl.resetTabele(absTerm);
           
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtblTermini = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jbtDodaj = new javax.swing.JButton();
        jbtIzbaci = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jtxtNaziv = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jtxtCena = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtxtBrTermina = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jbtSacuvaj = new javax.swing.JButton();

        jtblTermini.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtblTermini);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jbtDodaj.setText("+");
        jbtDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDodajActionPerformed(evt);
            }
        });

        jbtIzbaci.setText("-");
        jbtIzbaci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtIzbaciActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Termini");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbtDodaj, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                    .addComponent(jbtIzbaci, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(15, 15, 15)
                .addComponent(jbtDodaj)
                .addGap(18, 18, 18)
                .addComponent(jbtIzbaci)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Naziv paketa:");

        jLabel2.setText("Cena paketa:");

        jtxtBrTermina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtBrTerminaActionPerformed(evt);
            }
        });

        jLabel3.setText("Broj termina:");

        jbtSacuvaj.setText("Saƒçuvaj");
        jbtSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jtxtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtxtBrTermina, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jtxtCena, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtBrTermina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtCena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jbtSacuvaj))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtBrTerminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtBrTerminaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtBrTerminaActionPerformed

    private void jbtIzbaciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtIzbaciActionPerformed
        // TODO add your handling code here:
        int red = jtblTermini.getSelectedRow();

        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Nije odabran termin "
                    + "za izbacivanje!", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
            return;
        }
        tbl.izbaci(red);
        brojTermina();
        System.out.println("KAD KLIKNEM -: "+tbl.vratiListuTermina().size());
        System.out.println("KAD KLIKNEM -, BRISEM" + brisem.size());
    }//GEN-LAST:event_jbtIzbaciActionPerformed

    private void jbtDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDodajActionPerformed
        // TODO add your handling code here:
        tbl.napraviRed();
        brojTermina();
        System.out.println("KAD KLIKNEM +,za dodavanje: "+tbl.vratiListuTermina().size());
//         System.out.println("KAD KLIKNEM +, BRISEM" + brisem.size());
    }//GEN-LAST:event_jbtDodajActionPerformed

    private void jbtSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSacuvajActionPerformed
        // TODO add your handling code here:
        String brTermina = jtxtBrTermina.getText();
        try {
            int brTer = Integer.parseInt(brTermina);
            if (brTer < 1) {
                JOptionPane.showMessageDialog(this, "Nije unet ni jedan "
                        + "termin", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Nije unet ni jedan "
                    + "termin", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
            return;
        }

        if (mode.equals("create")) {
            String nazivPaketa = jtxtNaziv.getText().toLowerCase();
            String cena = jtxtCena.getText();

            if (nazivPaketa.length() == 0) {
                JOptionPane.showMessageDialog(this, "Nije uneto ime "
                        + "paketa", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                return;
            }

            if (imaVecTajPaket(nazivPaketa)) {
                JOptionPane.showMessageDialog(this, "Veƒá postoji paket sa "
                        + "tim imenom", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                return;
            }

            if (cena.length() == 0) {
                JOptionPane.showMessageDialog(this, "Nije uneta cena paketa!", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                return;
            }

            if (nijeBroj(cena)) {
                JOptionPane.showMessageDialog(this, "Cena nije uneta u "
                        + "validnom formatu!", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                return;
            }

            int j = 0;
            List<Termin> termini = tbl.vratiListuTermina();
            for (Termin termin : termini) {
                j++;
                if (termin.getSmena().equals("odaberi smenu")) {
                    JOptionPane.showMessageDialog(this, "Nije odabrana smena "
                            + "za termin na poziciji: " + j + "", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                    return;
                }
            }

            Paket pak = new Paket("0", nazivPaketa, cena);
//            pak.setTermini(termini);
            List<Object> lista = new ArrayList<>();
            //OVO JE MOGLO I PAMETNIJE DA SE RESI... AL STA SAD
            
            lista.add(pak);
            System.out.println("PAKET: "+pak);
            List<Termin> terLis = new ArrayList<>();
            for (Termin tL : termini) {
                tL.setPaket(pak);
                System.out.println("TERMIN U LISTI");
                terLis.add(tL);
            }
            //kk
            
//            lista.add(paket);
            lista.add(terLis);
            try {
                System.out.println(lista.size());
                Paket p = (Paket) Kontroler.vratiKontrolera().zapamtiPaket(lista);
//                JOptionPane.showMessageDialog(this, "Nije saƒçuvan paket "
//                             + j + "", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                JOptionPane.showMessageDialog(jtxtCena, "Dodat je paket sa nazivom: "
                        + p.getNaziv() + "i cenom: " + p.getCena());

                tblP.resetTabele(Kontroler.vratiKontrolera().vratiSvePakete());
            } catch (IOException ex) {
                Logger.getLogger(DodajPaketFrm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DodajPaketFrm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (mode.equals("update")) {
            //brojTermina();
            String nazivPaketa = jtxtNaziv.getText().toLowerCase();
            String cena = jtxtCena.getText();

            if (nazivPaketa.length() == 0) {
                JOptionPane.showMessageDialog(this, "Nije uneto ime "
                        + "paketa", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                return;
            }

            if (cena.length() == 0) {
                JOptionPane.showMessageDialog(this, "Nije uneta cena paketa!", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                return;
            }

            if (nijeBroj(cena)) {
                JOptionPane.showMessageDialog(this, "Cena nije uneta u "
                        + "validnom formatu!", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                return;
            }

            int j = 0;
            List<Termin> termini = tbl.vratiListuTermina();
            for (Termin termin : termini) {
                j++;
                if (termin.getSmena().equals("odaberi smenu")) {
                    JOptionPane.showMessageDialog(this, "Nije odabrana smena "
                            + "za termin na poziciji: " + j + "", "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                    return;
                }
            }
            
            //List<Termin> zaBrisanje = paket.getTermini();
//            List<Termin> zaUbacivanje = tbl.vratiListu();
//            for (Termin termin : zaUbacivanje) {
//               
//            }
            
//            System.out.println("ZA BRISANJE:  "+zaBrisanje.size());
//            System.out.println("BRISEM: "+ brisem.size());
//            System.out.println("ZA UBACIVANJE BR:  "+tbl.vratiListuTermina().size());
            //System.out.println("ZA UBACIVANJE: ");
            
            paket.setCena(cena);
            paket.setNaziv(nazivPaketa);
            paket.setTermini(tbl.vratiListuTermina());
            System.out.println("Brisem: "+brisem.size());
            System.out.println("Pisem: "+tbl.vratiListuTermina().size());
            
            List<Object> lista = new ArrayList<Object>();
            
            List<Termin> terList = tbl.vratiListuTermina();
            List<AbstractObjekat> pisem = new ArrayList<>();
            
            for (Termin ttt : terList) {
                ttt.setPaket(paket);
                pisem.add(ttt);
            }
            
            lista.add(brisem);
            lista.add(paket);
            lista.add(pisem);
            
            try {
                Paket pp = (Paket) Kontroler.vratiKontrolera().izmeniPaket(lista);
//                 JOptionPane.showMessageDialog(this, "Nije  paket "
//                             , "Gre≈°ka!", JOptionPane.ERROR_MESSAGE, null);
                JOptionPane.showMessageDialog(jtxtCena, "Izmenjen je paket, naziv: "
                        + pp.getNaziv() + " i cena: " + pp.getCena());
//            updatePaket();
            } catch (IOException ex) {
                Logger.getLogger(DodajPaketFrm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DodajPaketFrm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jbtSacuvajActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtDodaj;
    private javax.swing.JButton jbtIzbaci;
    private javax.swing.JButton jbtSacuvaj;
    private javax.swing.JTable jtblTermini;
    private javax.swing.JTextField jtxtBrTermina;
    private javax.swing.JTextField jtxtCena;
    private javax.swing.JTextField jtxtNaziv;
    // End of variables declaration//GEN-END:variables

    private void srediTabeluCreate() {
        System.out.println("MODE: " + mode);
        if (mode.equals("create")) {
//            System.out.println("usao");
            tbl = new TblModelTermin(new ArrayList<>());
            jtblTermini.setModel(tbl);
        }
        
        srediComboUTabeli();
    }

    private void srediTabeluUpdate(List<Termin> uPaket) {

        if (mode.equals("update")) {
            tbl = new TblModelTermin(uPaket);
            jtblTermini.setModel(tbl);
        }

        srediComboUTabeli();

        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void brojTermina() {
        jtxtBrTermina.setText(tbl.vratiListuTermina().size() + "");
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void srediComboUTabeli() {
        String[] smene = {"prva", "druga", "treca"};

        JComboBox cbSmena = new JComboBox(smene);
//        System.out.println(cbSmena);

        //cbPredmet.addItem();
        TableColumn tcSmene = jtblTermini.getColumnModel().getColumn(0);
//        System.out.println(jtblTermini.getColumnModel());
//        System.out.println(tcSmene);
        tcSmene.setCellEditor(new DefaultCellEditor(cbSmena));

        String[] radniDani = {"DA", "NE"};

        JComboBox cbRadniDani = new JComboBox(radniDani);
//        System.out.println(cbRadniDani);

        //cbPredmet.addItem();
        TableColumn tcRadniDani = jtblTermini.getColumnModel().getColumn(1);
//        System.out.println(jtblTermini.getColumnModel());
//        System.out.println(tcRadniDani);
        tcRadniDani.setCellEditor(new DefaultCellEditor(cbRadniDani));
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private boolean imaVecTajPaket(String unetiNaziv) {
        try {
            List<AbstractObjekat> paketi = Kontroler.vratiKontrolera().vratiSvePakete();

            for (AbstractObjekat abs : paketi) {
                Paket p = (Paket) abs;
                if (p.getNaziv().equals(unetiNaziv)) {
                    return true;
                }
            }

            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        } catch (IOException ex) {
            Logger.getLogger(DodajPaketFrm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DodajPaketFrm.class.getName()).log(Level.SEVERE, null, ex);
        }

        return false;
    }

    private boolean nijeBroj(String cena) {
        String brojevi = "0123456789";

        for (int i = 0; i < cena.length(); i++) {
            if (!brojevi.contains(cena.charAt(i) + "")) {
                return true;
            }
        }

        return false;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void obrisiTermine() {
        //Kontroler.vratiKontrolera().vratiListuTermina();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void updatePaket() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
